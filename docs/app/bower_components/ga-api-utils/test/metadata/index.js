var metadata=require("../../lib/metadata"),assert=require("assert"),fixtures=require("./fixtures/columns.json"),sinon=require("sinon");require("./stubs/gapi"),describe("metadata",function(){describe(".get",function(){it('returns a "thenable" that is resolved with an account summaries array.',function(t){var e=metadata.get();assert("then"in e),e.then(function(e){assert.deepEqual(e.all(),fixtures.items),t()}).catch(t)}),it("does not query the API more than once, even with multiple calls.",function(t){var e=sinon.spy(gapi.client.analytics.metadata.columns,"list");metadata.get().then(function(a){metadata.get().then(function(s){metadata.get().then(function(n){assert(0===e.callCount),assert.equal(a,s),assert.equal(s,n),assert.deepEqual(n.all(),fixtures.items),e.restore(),t()}).catch(t)})})}),it("accepts an optional parameter to clear the cache.",function(t){var e=sinon.spy(gapi.client.analytics.metadata.columns,"list");metadata.get(!0).then(function(a){metadata.get(!0).then(function(s){metadata.get(!0).then(function(n){assert.equal(e.callCount,3),assert.notEqual(a,s),assert.notEqual(s,n),assert.deepEqual(a,s),assert.deepEqual(s,n),assert.deepEqual(n.all(),fixtures.items),e.restore(),t()}).catch(t)})})})})});