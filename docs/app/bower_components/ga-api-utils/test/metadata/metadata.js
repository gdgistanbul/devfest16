require("native-promise-only"),require("./stubs/gapi");var Metadata=require("../../lib/metadata/metadata"),assert=require("assert"),columns=require("./fixtures/columns.json").items,metrics=columns.filter(function(e){return"METRIC"==e.attributes.type}),publicMetrics=metrics.filter(function(e){return"PUBLIC"==e.attributes.status}),deprecatedMetrics=metrics.filter(function(e){return"DEPRECATED"==e.attributes.status}),dimensions=columns.filter(function(e){return"DIMENSION"==e.attributes.type}),publicDimensions=dimensions.filter(function(e){return"PUBLIC"==e.attributes.status}),deprecatedDimensions=dimensions.filter(function(e){return"DEPRECATED"==e.attributes.status});describe("Metadata",function(){var e=new Metadata(columns);describe("#all",function(){it("returns the full list of columns.",function(){assert.deepEqual(e.all(),columns)})}),describe("#allMetrics",function(){it("gets only the columns that are metrics, optionally filteredby a status parameter.",function(){assert.deepEqual(e.allMetrics(),metrics),assert.deepEqual(e.allMetrics("public"),publicMetrics),assert.deepEqual(e.allMetrics("deprecated"),deprecatedMetrics)})}),describe("#allDimensions",function(){it("gets only the columns that are dimensions, optionally filteredby a status parameter.",function(){assert.deepEqual(e.allDimensions(),dimensions),assert.deepEqual(e.allDimensions("public"),publicDimensions),assert.deepEqual(e.allDimensions("deprecated"),deprecatedDimensions)})}),describe("#get",function(){it("gets the attributes object of a column given an ID.",function(){assert.deepEqual(e.get("ga:users"),columns[7].attributes)})})});